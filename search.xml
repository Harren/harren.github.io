<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Sonar代码质量分析使用]]></title>
    <url>%2F2017%2F10%2F17%2Fsonar-mannual%2F</url>
    <content type="text"><![CDATA[Sonar概述Sonar是一个用于代码质量管理的开放平台。通过插件机制，Sonar 可以集成不同的测试工具，代码分析工具，以及持续集成工具。 与持续集成工具（例如 Hudson/Jenkins 等）不同，Sonar 并不是简单地把不同的代码检查工具结果（例如 FindBugs，PMD 等）直接显示在 Web 页面上，而是通过不同的插件对这些结果进行再加工处理，通过量化的方式度量代码质量的变化，从而可以方便地对不同规模和种类的工程进行代码质量管理。 在对其他工具的支持方面，Sonar 不仅提供了对 IDE 的支持，可以在 Eclipse 和 IntelliJ IDEA 这些工具里联机查看结果；同时 Sonar 还对大量的持续集成工具提供了接口支持，可以很方便地在持续集成中使用 Sonar。此外，Sonar的插件还可以对 Java 以外的其他编程语言提供支持，对国际化以及报告文档化也有良好的支持。 Sonar安装本文主要介绍 Sonar 的使用方法，直接到Sonar官网下载最近的发型包即可，本文使用的为最新的版本为6.5(推荐使用最新版)，其源代码可以参考github地址。 下载zip包后，直接解压，然后根据应用服务器环境启动 bin 目录下的脚本即可 12bin/linux-x86-64/sonar.sh -h // 显示所有命令bin/linux-x86-64/sonar.sh start // 启动，默认为9000端口 然后在浏览器中访问 http://localhost:9000 即可, 初始化用户名和密码为: admin/admin]]></content>
  </entry>
  <entry>
    <title><![CDATA[FFmpeg命令行转压视频]]></title>
    <url>%2F2017%2F10%2F14%2Fffmpeg-guide%2F</url>
    <content type="text"><![CDATA[FFmpeg是一套可以用来记录、转换数字音频、视频，并能将其转化为流的开源计算机程序。采用LGPL或GPL许可证。它提供了录制、转换以及流化音视频的完整解决方案。它包含了非常先进的音频/视频编解码库libavcodec，为了保证高可移植性和编解码质量，libavcodec里很多code都是从头开发的。 安装直接到官网http://ffmpeg.org/download.html根据系统下载对应的版本即可，建议直接下载static版，开箱即用，对于mac用户而言，也可以直接brew安装，命令行如下： 1brew install ffmpeg --with-faac --with-fdk-aac --with-ffplay --with-fontconfig --with-freetype --with-libass --with-libbluray --with-libcaca --with-libsoxr --with-libquvi --with-frei0r --with-libvidstab --with-libvorbis --with-libvpx --with-opencore-amr --with-openjpeg --with-openssl --with-opus --with-rtmpdump --with-schroedinger --with-speex --with-theroa --with-tools --with-x265 使用安装好之后就可以使用ffmpeg命令来压制你的视频文件了，下面为一个简单的命令行使用，对于压缩效果不满意的可以根据ffmpeg参数进行调整 1ffmpeg -i your_video -vcodec libx264 -preset fast -crf 20 -y -vf "scale=1920:-1" -acodec libmp3lame -ab 128k your_output 对该命令的常用参数介绍如下 命令行参数 意义 默认值 -i 输入文件 -vcodec 编码格式，支持h264和h265 xvid -preset 编码速率控制，编码加快，意味着信息丢失严重，输出视频质量差 -crt 控制输出质量的，范围0-51，0为无失真编码，建议18-28 23 -y 覆盖输出文件，即如果 output.wmv 文件已经存在的话，不经提示就覆盖掉 -vf 视频过滤器，样例中表示输出保持原始宽高比的1920视频 -acodec 音频编码方式 -ab 音频数据流量，一般选择32，64，96，128 推荐使用128 部分参数详细说明如下 –crt: 这个选项会直接影响到输出视频的码率，当设置了这个参数之后，再设置－b指定码率不会生效，本人对一个368M的avi文件进行压缩，结果如下(该视频总共450帧，时长15s) crf值 压缩后文件大小 20 8.14M 20 8.14M 30 2.40M –preset: 指定编码的配置,x264提供了一些预设值，而这些预设值可以通过preset指定。这些预设值有包括：ultrafast，superfast，veryfast，faster，fast，medium，slow，slower，veryslow和placebo。ultrafast编码速度最快，但压缩率低，生成的文件更大，placebo则正好相反。x264所取的默认值为medium。需要说明的是，preset主要是影响编码的速度，并不会很大的影响编码出来的结果的质量 常用参数可选视频参数ps:仅仅列出部分参数，部分高级选项请自行查阅官方文档 命令行参数 意义 默认值 -bitexact 使用标准比特率 -vb 指定视频的比特率，也就是码率 -s size 指定分辨率 -r rate 帧率 29.97 可选音频参数 命令行参数 意义 -ab 设置比特率(单位：bit/s，也许老版是kb/s)前面，-ac设为立体声时要以一半比特率来设置，比如192kbps的就设成96，转换 默认比特率都较小，要听到较高品质声音的话建议设到160kbps（80） -ar 设置音频采样率, 设置音频采样率 (单位：Hz)，PSP只认24000 -ac 设置声道数，1就是单声道，2就是立体声，转换单声道的TVrip可以用1（节省一半容量），高品质的DVDrip就可以用2 -an 取消音频 -vol 设置录制音量大小, 在转换时可以用这个提高音量 参考文献 ffmpeg官方文档]]></content>
      <categories>
        <category>视频压缩</category>
      </categories>
      <tags>
        <tag>视频压缩</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java设计模式(二)工厂模式]]></title>
    <url>%2F2017%2F09%2F30%2Fdesign-pattern-factory%2F</url>
    <content type="text"></content>
      <categories>
        <category>Java</category>
        <category>Design Pattern</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Design Pattern</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java设计模式(二)迭代器模式]]></title>
    <url>%2F2017%2F09%2F27%2Fdesign-pattern-iterator%2F</url>
    <content type="text"><![CDATA[定义：提供一种方法顺序访问一个聚合对象中各个元素，而又不需暴露该对象的内部表示。从定义中可以看出，迭代器模式是为了在不暴露该对象内部表示的情况下，提供一种顺序访问聚合对象中元素的方法。]]></content>
      <categories>
        <category>Java</category>
        <category>Design Pattern</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Design Pattern</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java设计模式(一)单例模式]]></title>
    <url>%2F2017%2F09%2F26%2Fdesign-pattern-singleton%2F</url>
    <content type="text"><![CDATA[程序运行时,通常会生成很多实例,当我们在程序中表示某个东西只需要一个时,就会产生”只能创建一个实例”的需求,像这样的确保只生成一个实例的模式被称为Singleton模式 Singleton类Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites``` bash$ hexo deploy]]></content>
      <categories>
        <category>Java</category>
        <category>Design Pattern</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Design Pattern</tag>
      </tags>
  </entry>
</search>
